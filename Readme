Link:https://github.com/Lesslibls/Tarea2_Login.git
__________________________________________________________________________________________________
Descripci√≥n: 

-----------------------------------------------------------------------------------------------
Pasos...

Paso 1 crear üìÇcarpetas backend y frontend
Paso 2 en consolaüíª: cd backend --> para entrar
Paso 3 preparar el entornoüñ±Ô∏è de Node.js --> npm init -y
Paso 4 Instalar los paquetesüì¶ necesarios
    npm install express mongoose bcrypt-nodejs dotenv cors
    npm install nodemon --save-dev
        -express: Para crear el servidor web.
        -mongoose: Para conectarnos a la base de datos de MongoDB.
        -bcrypt-nodejs: Para encriptar las contrase√±as de los usuarios.
        -dotenv: Para gestionar las variables de entorno, como la URL de la base de datos.
        -cors: Para permitir que nuestra aplicaci√≥n de React se comunique con el servidor de Node.js.
        -nodemon: Para que el servidor se reinicie autom√°ticamente cada vez que hagamos un cambio.

Paso 5 crear archivoüìã principal llamado server.js
‚ú®Paso 6 para correr el proyecto, ejecutar: npx nodemon server.js
Paso 7 configurar archivo dockerüê≥
‚ú®Paso 8 levantamos el contenedor con: docker-compose up -d 
Paso 9 crear archivo .env en backend para la configuracion de la base de datos
Paso 10 configurar archivo .env y server.js
Paso 11 crear carpeta routes dentro de la carpeta backend con el archivo auth.js para configurar las rutas de usuario.
Paso 12 crear carpeta models dentro de backend con el archivo User.js archivo que definira la vista de como se veran los datos del usuaui en la base de datos de MongoDB y se define la estructura.
Paso 13 en el archivo auth.js dentro de routes se agregara el codigo necesario para manejar el registro y el inicio de sesi√≥n.
üõ†Ô∏èPaso 14 instalacion de herramientas para mayor seguridad del sistema:
    Ejecutar: 
        npm install express-rate-limit express-session xss-clean
            - express-rate-limit:Previene ataques al limitar cu√°ntas solicitudes puede hacer una misma direcci√≥n IP en un per√≠odo de tiempo.
           - express-session: Ayuda a gestionar las sesiones de los usuarios, lo que nos permitir√° mantenerlos   "logueados" despu√©s de iniciar sesi√≥n.
            - xss-clean: Proteger√° nuestra aplicaci√≥n de ataques de tipo XSS (Cross-Site Scripting) al limpiar los datos que llegan del usuario.
    Ejecutar:
        npm install helmet morgan passport passport-local
            - helmet:Ayuda a protegerla de vulnerabilidades comunes al configurar autom√°ticamente cabeceras HTTP seguras. Es muy f√°cil de usar y muy efectivo.
            - Se encarga de registrar las peticiones que llegan a nuestro servidor, lo que es s√∫per √∫til para depurar problemas y monitorear la actividad.
            - Passport.js : middleware de autenticaci√≥n flexible para Node.js.
Paso 15 configurar middleware de paquetes instalados en server.js
üõ†Ô∏èPaso 16 intalar: 
        npm install connect-mongo
            //para que express sesion guarde la informacion en la base de datos
Paso 17 importamos el archivo de rutas al archivo server
        // Rutas
        app.use('/api/auth', require('./routes/auth'));
---------------------------------------------------------------------------------------------
Se inicia la parte de interfaz
Paso 1 üîß ejecutar:
        npx create-react-app frontend
        cd frontend
        npm install react-router-dom axios bootstrap
        ‚ú®npm start
Paso 2 dentro de frontend en src, crear la carpta components con el archivo Welcome.js y Register.js



