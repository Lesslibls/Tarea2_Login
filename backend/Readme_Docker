Explicación de docker-compose.yml

version: Define la sintaxis y las funciones que usará Docker Compose. La versión 3 es la más común.

services: Esta es la sección principal. Aquí es donde definimos cada uno de los contenedores que queremos ejecutar.

mongo: Es el nombre del primer servicio.

image: mongo: Le dice a Docker que use la imagen oficial de MongoDB del registro de Docker Hub.

container_name: mongo: Le da un nombre a nuestro contenedor para que sea fácil de identificar.

restart: always: Configura el contenedor para que se reinicie automáticamente si se detiene por alguna razón.

ports: - "27017:27017": Mapea los puertos. El primer 27017 es el puerto de tu computadora, y el segundo es el puerto interno del contenedor. Esto permite que tu servidor de Node.js se conecte al contenedor de MongoDB.

environment: Establece variables de entorno dentro del contenedor. En este caso, para mongo-express pueda autenticarse con el usuario y la clave que has definido.

volumes: - ./db-data:/data/db: Mantiene tus datos persistentes. La carpeta ./db-data en tu computadora se sincroniza con la carpeta /data/db dentro del contenedor. Así, si el contenedor se borra o se reinicia, tus datos no se pierden.

networks: - mongo-network: Asigna el contenedor a una red específica, permitiendo que se comunique con otros contenedores en la misma red.

mongo-express: Es el servicio de la interfaz gráfica.

ports: - 8081:8081: Mapea el puerto 8081 para que puedas acceder a la interfaz de administración en tu navegador a través de http://localhost:8081.

depends_on: - mongo: Le dice a Docker Compose que inicie el contenedor de mongo antes de intentar iniciar mongo-express. Esto evita errores de conexión.

environment: Las variables de aquí son para que mongo-express sepa cómo conectarse a tu contenedor de MongoDB.

links: - mongo: Es una forma más antigua de conectar servicios, similar a depends_on.

networks: Define la red que los servicios usarán para comunicarse entre sí de forma interna y segura.