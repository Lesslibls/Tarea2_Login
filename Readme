Descripci√≥n:
Este proyecto es una aplicaci√≥n web de pila completa (full-stack) que implementa un sistema de autenticaci√≥n de usuarios robusto y seguro. Construida con la arquitectura MERN (MongoDB, Express, React, Node.js), la aplicaci√≥n maneja el registro y el inicio de sesi√≥n de usuarios, asegurando que solo los usuarios autenticados puedan acceder a las rutas protegidas. El proyecto utiliza Docker para la contenerizaci√≥n de la base de datos y la aplicaci√≥n, lo que garantiza un entorno de desarrollo consistente y una implementaci√≥n m√°s sencilla.

Caracter√≠sticas y Tecnolog√≠as Clave
    - Autenticaci√≥n de Usuarios: Se implementaron rutas seguras para el registro y el inicio de sesi√≥n.

    - Encriptaci√≥n de Contrase√±as: Las contrase√±as se gestionan de forma segura utilizando la librer√≠a bcryptjs para el hash criptogr√°fico antes de ser almacenadas en la base de datos.

    - Gesti√≥n de Estado de Sesi√≥n: El estado de inicio de sesi√≥n se mantiene en el servidor usando express-session y en el cliente a trav√©s de localStorage para proteger las rutas del frontend.

    - Ruteo Condicional: El frontend utiliza react-router-dom para redirigir a los usuarios no autenticados a la p√°gina de login.

    - API RESTful: La aplicaci√≥n se comunica a trav√©s de una API RESTful que maneja las solicitudes del cliente y las respuestas del servidor.

    - Contenerizaci√≥n: Se utiliza Docker y docker-compose para el entorno de desarrollo, asegurando que los servicios de mongo y mongo-express se ejecuten de manera independiente y conectada.

-----------------------------------------------------------------------------------------------
Pasos...

Paso 1 crear üìÇcarpetas backend y frontend
Paso 2 en consolaüíª: cd backend --> para entrar
Paso 3 preparar el entornoüñ±Ô∏è de Node.js --> npm init -y
Paso 4 Instalar los paquetesüì¶ necesarios
    npm install express mongoose bcrypt-nodejs dotenv cors
    npm install nodemon --save-dev
        -express: Para crear el servidor web.
        -mongoose: Para conectarnos a la base de datos de MongoDB.
        -bcrypt-nodejs: Para encriptar las contrase√±as de los usuarios.
        -dotenv: Para gestionar las variables de entorno, como la URL de la base de datos.
        -cors: Para permitir que nuestra aplicaci√≥n de React se comunique con el servidor de Node.js.
        -nodemon: Para que el servidor se reinicie autom√°ticamente cada vez que hagamos un cambio.

Paso 5 crear archivoüìã principal llamado server.js
‚ú®Paso 6 para correr el proyecto, ejecutar: npx nodemon server.js
Paso 7 configurar archivo dockerüê≥
‚ú®Paso 8 levantamos el contenedor con: docker-compose up -d 
Paso 9 crear archivo .env en backend para la configuracion de la base de datos
Paso 10 configurar archivo .env y server.js
Paso 11 crear carpeta routes dentro de la carpeta backend con el archivo auth.js para configurar las rutas de usuario.
Paso 12 crear carpeta models dentro de backend con el archivo User.js archivo que definira la vista de como se veran los datos del usuaui en la base de datos de MongoDB y se define la estructura.
Paso 13 en el archivo auth.js dentro de routes se agregara el codigo necesario para manejar el registro y el inicio de sesi√≥n.
üõ†Ô∏èPaso 14 instalacion de herramientas para mayor seguridad del sistema:
    Ejecutar: 
        npm install express-rate-limit express-session
            - express-rate-limit:Previene ataques al limitar cu√°ntas solicitudes puede hacer una misma direcci√≥n IP en un per√≠odo de tiempo.
           - express-session: Ayuda a gestionar las sesiones de los usuarios, lo que nos permitir√° mantenerlos   "logueados" despu√©s de iniciar sesi√≥n.
    Ejecutar:
        npm install helmet morgan passport passport-local
            - helmet:Ayuda a protegerla de vulnerabilidades comunes al configurar autom√°ticamente cabeceras HTTP seguras. Es muy f√°cil de usar y muy efectivo.
            - Se encarga de registrar las peticiones que llegan a nuestro servidor, lo que es s√∫per √∫til para depurar problemas y monitorear la actividad.
            - Passport.js : middleware de autenticaci√≥n flexible para Node.js.
Paso 15 configurar middleware de paquetes instalados en server.js
üõ†Ô∏èPaso 16 intalar: 
        npm install connect-mongo
            //para que express sesion guarde la informacion en la base de datos
Paso 17 importamos el archivo de rutas al archivo server
        // Rutas
        app.use('/api/auth', require('./routes/auth'));
---------------------------------------------------------------------------------------------
üé®Interfaz
Paso 1 üîß ejecutar:
        npx create-react-app frontend
        cd frontend
        npm install react-router-dom axios bootstrap
        ‚ú®npm start

Paso 2 Configurar las Rutas en App.js

Paso 2 dentro de frontend en src, crear la carpta components con el archivo Welcome.js y Register.js

Se verifica ejecuta en backend:
        npm uninstall xss-clean
-------------------------------------------------------------------------------------------------------
Para adceder a mongo express
    ejecutar:
        docker-compose up -d
    ir a:
        http://localhost:8081
    Inicie sesi√≥n y vea su base de datos
        Nombre de usuario: user
        Contrase√±a: clave
-----------------------------------------------------------------------------------------------------------
 Proteger las Rutas en el Backend
    Paso 1 Se creara una nueva carpeta llamada middleware dentro de tu carpeta backend. Luego, se crea un archivo llamado 
    Paso 2 se modifica el archivo de routes

    en backend
        npm install bcryptjs
----------------------------------------------------------------------------------------------------------------
Para hacer que al ejecutar npm start nos redirija a una pagina de inicio...
Paso 1 Crea un componente llamado Home.js y a√±ade su codigo
Paso 2 a√±ade las rutas en el archivo App.js





